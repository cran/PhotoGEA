library(PhotoGEA)
?read_gasex_file
licor_file <- read_gasex_file(
PhotoGEA_example_file_path('ball_berry_1.xlsx'),
'time'
)
View(licor_file)
traceback()
View
View.data.frame
.rs.callAs
.rs.explorer.inspectObject
is.list(licor_file)
tmp <- list(a = 1, b = 2, c = 3)
View(tmp)
tmp2 <- data.frame(a = 1, b = 2, c = 3)
is.list(tmp2)
.rs.explorer.inspectList
View(licor_file$main_data)
names(licor_file)
.rs.slice
.rs.slice(licor_file, 1, 5)
tmpslice <- .rs.slice(licor_file, 1, 5)
View(tmpslice)
.rs.explorer.createContext()
tmpslice <- .rs.slice(licor_file, 1, 1000)
str(tmpslice)
length(tmpslice)
tmpslice[1]
names(licor_file)
?View
##------ [C:/Users/eloch/Documents/GitHub] Tue Jun  3 22:15:06 2025 ------##
remove.packages('PhotoGEA')
install.packages('licor-processing-and-analysis', repos=NULL, type='SOURCE')
library(PhotoGEA)
library(testthat)
test_dir('licor-processing-and-analysis/tests/testthat')
?fit_c3_aci
setwd('licor-processing-and-analysis/vignettes/web_only/')
tools::buildVignette('frequent_questions.Rmd')
tools::buildVignette('frequent_questions.Rmd')
setwd('../..')
getwd()
pkgdown::build_articles()
pkgdown::build_articles()
# Read an example Licor file included in the PhotoGEA package
licor_file <- read_gasex_file(
  PhotoGEA_example_file_path('c3_aci_1.xlsx')
)
# Define a new column that uniquely identifies each curve
licor_file[, 'species_plot'] <-
  paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )
# Organize the data
licor_file <- organize_response_curve_data(
    licor_file,
    'species_plot',
    c(9, 10, 16),
    'CO2_r_sp',
    columns_to_average = c('Qin', 'TleafCnd')
)
# Calculate the total pressure in the Licor chamber
licor_file <- calculate_total_pressure(licor_file)
# Calculate temperature-dependent values of C3 photosynthetic parameters. Here
# we use the "Bernacchi" option, but override the Tp and gmc responses with a
# flat one.
licor_file <- calculate_temperature_response(
    licor_file,
    within(c3_temperature_param_bernacchi, {
        Tp_norm = c3_temperature_param_flat$Tp_norm
        gmc_norm = c3_temperature_param_flat$gmc_norm
    })
)
# Get just one curve
one_curve <- licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE]
# Purposely introduce negative Ci values
one_curve_bad <- one_curve
one_curve_bad[one_curve_bad[, 'CO2_r_sp'] == 20, 'Ci'] <- -5
fit_res <- fit_c3_aci(
            one_curve,
            debug_mode = TRUE
        )
?optimizer_nmkb
fit_res <- fit_c3_aci(
            one_curve,
            optim_fun = optimizer_nmkb(1, maxfeval = 2)
            debug_mode = TRUE
        )
fit_res <- fit_c3_aci(
            one_curve,
            optim_fun = optimizer_nmkb(1, maxfeval = 2),
            debug_mode = TRUE
        )
# Set a seed before fitting since there is randomness involved with the
    # optimizer
    set.seed(1234)
    tfile <- tempfile()
    sink(tfile)
    expect_silent(
        fit_c3_aci(
            one_curve,
            optim_fun = optimizer_nmkb(1, maxfeval = 2),
            debug_mode = TRUE
        )
    )
    sink()
    # Read the file containing the debug output
    debug_output <- readLines(tfile)
    # Set a seed before fitting since there is randomness involved with the
    # optimizer
    set.seed(1234)
    tfile <- tempfile()
    sink(tfile)
    fit_res <- fit_c3_aci(
        one_curve,
        optim_fun = optimizer_nmkb(1, maxfeval = 2),
        debug_mode = TRUE
    )
    sink()
    # Read the file containing the debug output
    debug_output <- readLines(tfile)
    str(debug_output)
debug_output
?writeLines
getwd()
setwd('tests/testthat')
saved_fpath <- file.path('..', 'test_data', 'fit_c3_aci_debug.txt')
    # Run this to update the saved output file
    writeLines(debug_output, saved_fpath)
setwd('../../..')
getwd()
test_dir('licor-processing-and-analysis/tests/testthat')
?gsub
?Sys.time
# The debug output includes timestamps, which will never be identical between
# runs. This function removes them.
process_saved_debug <- function(debug_output) {
    gsub(
        '^Time: [0123456789-]+ [0123456789-]+ +',
        '',
        debug_output
    )
}
tmp <- process_saved_debug(saved_debug_output)
tmp
# Read an example Licor file included in the PhotoGEA package
licor_file <- read_gasex_file(
  PhotoGEA_example_file_path('c3_aci_1.xlsx')
)
# Define a new column that uniquely identifies each curve
licor_file[, 'species_plot'] <-
  paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )
# Organize the data
licor_file <- organize_response_curve_data(
    licor_file,
    'species_plot',
    c(9, 10, 16),
    'CO2_r_sp',
    columns_to_average = c('Qin', 'TleafCnd')
)
# Calculate the total pressure in the Licor chamber
licor_file <- calculate_total_pressure(licor_file)
# Calculate temperature-dependent values of C3 photosynthetic parameters. Here
# we use the "Bernacchi" option, but override the Tp and gmc responses with a
# flat one.
licor_file <- calculate_temperature_response(
    licor_file,
    within(c3_temperature_param_bernacchi, {
        Tp_norm = c3_temperature_param_flat$Tp_norm
        gmc_norm = c3_temperature_param_flat$gmc_norm
    })
)
# Get just one curve
one_curve <- licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE]
# Purposely introduce negative Ci values
one_curve_bad <- one_curve
one_curve_bad[one_curve_bad[, 'CO2_r_sp'] == 20, 'Ci'] <- -5
# Set a seed before fitting since there is randomness involved with the
    # optimizer
    set.seed(1234)
    # Run a quick fit in debug mode, saving the output to a temporary file
    tfile <- tempfile()
    sink(tfile)
    fit_res <- fit_c3_aci(
        one_curve,
        optim_fun = optimizer_nmkb(1, maxfeval = 2),
        debug_mode = TRUE
    )
    sink()
    # Read the file containing the debug output
    debug_output <- readLines(tfile)
    # Read the saved version
    saved_fpath <- file.path('..', 'test_data', 'fit_c3_aci_debug.txt')
    # Run this command to update the saved output file:
    #  writeLines(debug_output, saved_fpath)
    saved_debug_output <- readLines(saved_fpath)
# The debug output includes timestamps, which will never be identical between
# runs. This function removes them.
process_saved_debug <- function(debug_output) {
    gsub(
        '^Time: [0123456789-]+ [0123456789-]+ +',
        '',
        debug_output
    )
}
tmp <- process_saved_debug(debug_output)
tmp
# The debug output includes timestamps, which will never be identical between
# runs. This function removes them.
process_saved_debug <- function(debug_output) {
    gsub(
        '^Time: [0123456789-]+ [0123456789:]+ +',
        '',
        debug_output
    )
}
tmp <- process_saved_debug(debug_output)
tmp
# The debug output includes timestamps, which will never be identical between
# runs. This function removes them.
process_saved_debug <- function(debug_output) {
    gsub(
        #'^Time: [0123456789-]+ [0123456789:]+ +',
        '^Time: ',
        '',
        debug_output
    )
}
tmp <- process_saved_debug(debug_output)
tmp
# The debug output includes timestamps, which will never be identical between
# runs. This function removes them.
process_saved_debug <- function(debug_output) {
    gsub(
        #'^Time: [0123456789-]+ [0123456789:]+ +',
        '^Time: [0123456789-]+',
        '',
        debug_output
    )
}
tmp <- process_saved_debug(debug_output)
tmp
# The debug output includes timestamps, which will never be identical between
# runs. This function removes them.
process_saved_debug <- function(debug_output) {
    gsub(
        #'^Time: [0123456789-]+ [0123456789:]+ +',
        '^Time: [0123456789-]+ [0123456789:.]+',
        '',
        debug_output
    )
}
tmp <- process_saved_debug(debug_output)
tmp
# The debug output includes timestamps, which will never be identical between
# runs. This function removes them.
process_saved_debug <- function(debug_output) {
    gsub(
        #'^Time: [0123456789-]+ [0123456789:]+ +',
        '^Time: [0123456789-]+ [0123456789:.]+ +',
        '',
        debug_output
    )
}
tmp <- process_saved_debug(debug_output)
tmp
setwd('licor-processing-and-analysis/tests/testthat')
saved_fpath <- file.path('..', 'test_data', 'fit_c3_aci_debug.txt')
setwd('../../..')
rm(list=ls())
test_dir('licor-processing-and-analysis/tests/testthat')
test_dir('licor-processing-and-analysis/tests/testthat')
setwd('licor-processing-and-analysis/tests/testthat')
# Read an example Licor file included in the PhotoGEA package
licor_file <- read_gasex_file(
  PhotoGEA_example_file_path('c3_aci_1.xlsx')
)
# Define a new column that uniquely identifies each curve
licor_file[, 'species_plot'] <-
  paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )
# Organize the data
licor_file <- organize_response_curve_data(
    licor_file,
    'species_plot',
    c(9, 10, 16),
    'CO2_r_sp',
    columns_to_average = c('Qin', 'TleafCnd')
)
# Calculate the total pressure in the Licor chamber
licor_file <- calculate_total_pressure(licor_file)
# Calculate temperature-dependent values of C3 photosynthetic parameters. Here
# we use the "Bernacchi" option, but override the Tp and gmc responses with a
# flat one.
licor_file <- calculate_temperature_response(
    licor_file,
    within(c3_temperature_param_bernacchi, {
        Tp_norm = c3_temperature_param_flat$Tp_norm
        gmc_norm = c3_temperature_param_flat$gmc_norm
    })
)
# Get just one curve
one_curve <- licor_file[licor_file[, 'species_plot'] == 'tobacco - 1', , TRUE]
# Purposely introduce negative Ci values
one_curve_bad <- one_curve
one_curve_bad[one_curve_bad[, 'CO2_r_sp'] == 20, 'Ci'] <- -5
# Set a seed before fitting since there is randomness involved with the
    # optimizer
    set.seed(1234)
    # Run a quick fit in debug mode, saving the output to a temporary file
    tfile <- tempfile()
    sink(tfile)
    fit_res <- fit_c3_aci(
        one_curve,
        optim_fun = optimizer_nmkb(1, maxfeval = 2),
        debug_mode = TRUE
    )
    sink()
    # Read the file containing the debug output
    debug_output <- readLines(tfile)
    # Read the saved version
    saved_fpath <- file.path('..', 'test_data', 'fit_c3_variable_j_debug.txt')
writeLines(debug_output, saved_fpath)
# Set a seed before fitting since there is randomness involved with the
    # optimizer
    set.seed(1234)
    # Run a quick fit in debug mode, saving the output to a temporary file
    tfile <- tempfile()
    sink(tfile)
    fit_res <- fit_c3_variable_j(
        one_curve,
        optim_fun = optimizer_nmkb(1, maxfeval = 2),
        debug_mode = TRUE
    )
    sink()
    # Read the file containing the debug output
    debug_output <- readLines(tfile)
    # Read the saved version
    saved_fpath <- file.path('..', 'test_data', 'fit_c3_variable_j_debug.txt')
writeLines(debug_output, saved_fpath)
# Read an example Licor file included in the PhotoGEA package
licor_file <- read_gasex_file(
  PhotoGEA_example_file_path('c4_aci_1.xlsx')
)
# Define a new column that uniquely identifies each curve
licor_file[, 'species_plot'] <-
  paste(licor_file[, 'species'], '-', licor_file[, 'plot'] )
# Organize the data
licor_file <- organize_response_curve_data(
    licor_file,
    'species_plot',
    c(9, 10, 16),
    'CO2_r_sp',
    columns_to_average = c('Qin', 'TleafCnd')
)
# Calculate temperature-dependent values of C4 photosynthetic parameters
licor_file <- calculate_temperature_response(licor_file, c4_temperature_param_vc)
# Calculate the total pressure in the Licor chamber
licor_file <- calculate_total_pressure(licor_file)
# Get just one curve
one_curve <- licor_file[licor_file[, 'species_plot'] == 'maize - 5', , TRUE]
# Purposely introduce negative Ci values
one_curve_bad <- one_curve
one_curve_bad[one_curve_bad[, 'CO2_r_sp'] == 20, 'Ci'] <- -5
# Set a seed before fitting since there is randomness involved with the
    # optimizer
    set.seed(1234)
    # Run a quick fit in debug mode, saving the output to a temporary file
    tfile <- tempfile()
    sink(tfile)
    fit_res <- fit_c4_aci(
        one_curve,
        optim_fun = optimizer_nmkb(1, maxfeval = 2),
        debug_mode = TRUE
    )
    sink()
    # Read the file containing the debug output
    debug_output <- readLines(tfile)
    # Read the saved version
    saved_fpath <- file.path('..', 'test_data', 'fit_c4_aci_debug.txt')
    # Run this command to update the saved output file:
    #  writeLines(debug_output, saved_fpath)
writeLines(debug_output, saved_fpath)
   # Set a seed before fitting since there is randomness involved with the
    # optimizer
    set.seed(1234)
    # Run a quick fit in debug mode, saving the output to a temporary file
    tfile <- tempfile()
    sink(tfile)
    fit_res <- fit_c4_aci_hyperbola(
        one_curve,
        optim_fun = optimizer_nmkb(1, maxfeval = 2),
        debug_mode = TRUE
    )
    sink()
    # Read the file containing the debug output
    debug_output <- readLines(tfile)
    # Read the saved version
    saved_fpath <- file.path('..', 'test_data', 'fit_c4_aci_hyperbola_debug.txt')
writeLines(debug_output, saved_fpath)
q()
